# üì¶ Importa√ß√µes
import streamlit as st
import pandas as pd
import io
import re
from datetime import datetime

# ‚öôÔ∏è Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gest√£o de Projetos PPCI", layout="centered")
st.title("üìÅ Ferramenta de Projetos PPCI")

# Inicializa o estado da sess√£o para armazenar as compara√ß√µes
if 'comparisons' not in st.session_state:
    st.session_state.comparisons = []
if 'comparacoes_extra' not in st.session_state:
    st.session_state.comparacoes_extra = []
if 'bombeiros' not in st.session_state:
    st.session_state.bombeiros = "Sim"

# üß† Fun√ß√µes auxiliares (fun√ß√µes do c√≥digo antigo e novo consolidadas)
def gerar_nome_arquivo(nome_projeto, nome_arquivo_entrada=None):
    if nome_arquivo_entrada:
        match = re.search(r"-R(\d+)", nome_arquivo_entrada)
        numero = int(match.group(1)) + 1 if match else 1
        novo_nome = re.sub(r"-R\d+", f"-R{numero:02}", nome_arquivo_entrada)
    else:
        novo_nome = f"checklistINC_{nome_projeto}-R00.xlsx"
    return novo_nome

def faixa_altura(h):
    if h == 0:
        return "T√©rrea"
    elif h < 6:
        return "H < 6 m"
    elif h < 12:
        return "6 ‚â§ H < 12 m"
    elif h < 23:
        return "12 ‚â§ H < 23 m"
    elif h < 30:
        return "23 ‚â§ H < 30 m"
    else:
        return "Acima de 30 m"

def medidas_por_faixa(faixa):
    tabela = {
        "Acesso de Viatura na Edifica√ß√£o": ["X"] * 6,
        "Seguran√ßa Estrutural contra Inc√™ndio": ["X"] * 6,
        "Compartimenta√ß√£o Horizontal ou de √Årea": ["X‚Å¥"] * 6,
        "Compartimenta√ß√£o de Verticais": ["", "", "", "X¬≤", "X¬≤", "X¬≤"],
        "Controle de Materiais de Acabamento": ["", "", "", "X", "X", "X"],
        "Sa√≠das de Emerg√™ncia": ["X", "X", "X", "X", "X", "X¬π"],
        "Brigada de Inc√™ndio": ["X"] * 6,
        "Ilumina√ß√£o de Emerg√™ncia": ["X"] * 6,
        "Alarme de Inc√™ndio": ["X¬≥", "X¬≥", "X¬≥", "X¬≥", "X¬≥", "X"],
        "Sinaliza√ß√£o de Emerg√™ncia": ["X"] * 6,
        "Extintores": ["X"] * 6,
        "Hidrantes e Mangotinhos": ["X"] * 6
    }
    faixas = ["T√©rrea", "H < 6 m", "6 ‚â§ H < 12 m", "12 ‚â§ H < 23 m", "23 ‚â§ H < 30 m", "Acima de 30 m"]
    idx = faixas.index(faixa)
    return {medida: tabela[medida][idx] for medida in tabela}

def notas_relevantes(resumo, altura):
    notas = []
    if altura >= 80:
        notas.append("1 ‚Äì Deve haver Elevador de Emerg√™ncia para altura maior que 80 m")
    if any("X¬≤" in v for v in resumo.values()):
        notas.append("2 ‚Äì Pode ser substitu√≠da por sistema de controle de fuma√ßa somente nos √°trios")
    if any("X¬≥" in v for v in resumo.values()):
        notas.append("3 ‚Äì O sistema de alarme pode ser setorizado na central junto √† portaria, desde que tenha vigil√¢ncia 24 horas")
    if any("X‚Å¥" in v for v in resumo.values()):
        notas.append("4 ‚Äì Devem ser atendidas somente as regras espec√≠ficas de compartimenta√ß√£o entre unidades aut√¥nomas")
    return notas

def fachada_edificacao(edf):
    if "um_ap_por_pav" in edf and edf["um_ap_por_pav"] == "Sim":
        return "toda a fachada do pavimento"
    elif "terrea" in edf and edf["terrea"] == "Sim":
        return "toda a fachada do edif√≠cio"
    elif "altura" in edf and "area" in edf:
        if edf["area"] <= 750 and edf["altura"] < 12:
            return "toda a √°rea da fachada"
        elif edf["area"] > 750 and edf["altura"] < 12:
            return "fachada da √°rea do maior compartimento"
        elif edf["area"] > 750 and edf["altura"] >= 12:
            return "fachada da √°rea do maior compartimento"
        else:
            return "toda a √°rea da fachada"
    else:
        return "toda a fachada do edif√≠cio"

def buscar_valor_tabela_simplificada(porcentagem, num_pavimentos):
    tabela = {
        1: {10: 4, 20: 5, 30: 6, 40: 7, 50: 8, 70: 9, 100: 10},
        2: {10: 6, 20: 7, 30: 8, 40: 9, 50: 10, 70: 11, 100: 12},
        3: {10: 8, 20: 9, 30: 10, 40: 11, 50: 12, 70: 13, 100: 14}
    }
    if num_pavimentos >= 3:
        num_pavimentos_lookup = 3
    else:
        num_pavimentos_lookup = num_pavimentos

    porcentagens_lookup = sorted(tabela[num_pavimentos_lookup].keys())
    porcentagem_mais_proxima = next((p for p in porcentagens_lookup if porcentagem <= p), porcentagens_lookup[-1])
    return tabela[num_pavimentos_lookup][porcentagem_mais_proxima]

def buscar_valor_tabela(porcentagem, fator_x):
    tabela = {
        20: [0.4, 0.4, 0.44, 0.46, 0.48, 0.49, 0.5, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51],
        30: [0.6, 0.66, 0.73, 0.79, 0.84, 0.88, 0.9, 0.92, 0.93, 0.94, 0.94, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95],
        40: [0.8, 0.8, 0.94, 1.02, 1.1, 1.17, 1.23, 1.27, 1.3, 1.32, 1.33, 1.33, 1.34, 1.34, 1.34, 1.34, 1.34, 1.34],
        50: [0.9, 1.0, 1.11, 1.22, 1.33, 1.42, 1.51, 1.58, 1.63, 1.66, 1.69, 1.7, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71],
        60: [1.0, 1.14, 1.26, 1.39, 1.52, 1.64, 1.76, 1.85, 1.93, 1.99, 2.03, 2.05, 2.07, 2.08, 2.08, 2.08, 2.08, 2.08],
        80: [1.2, 1.37, 1.52, 1.68, 1.85, 2.02, 2.18, 2.34, 2.48, 2.59, 2.67, 2.73, 2.77, 2.79, 2.8, 2.81, 2.81],
        100: [1.4, 1.56, 1.74, 1.93, 2.13, 2.34, 2.55, 2.76, 2.95, 3.12, 3.26, 3.36, 3.43, 3.48, 3.51, 3.52, 3.53]
    }
    valores_x = [1.0, 1.3, 1.6, 2.0, 2.5, 3.2, 4.0, 5.0, 6.0, 8.0, 10.0, 13.0, 16.0, 20.0, 25.0, 32.0, 40.0]
    porcentagem_mais_proxima = min(tabela.keys(), key=lambda p: abs(p - porcentagem))
    indice_x = min(range(len(valores_x)), key=lambda i: abs(valores_x[i] - fator_x))
    return tabela[porcentagem_mais_proxima][indice_x]

# üß≠ Interface principal
modo = st.radio("Como deseja come√ßar?", ["üìÑ Revisar projeto existente", "üÜï Criar novo projeto"])
df = pd.DataFrame()
arquivo = None
linha_selecionada = None
mostrar_campos = False
todas_edificacoes = [] # Lista principal para armazenar todas as edifica√ß√µes

if modo == "üìÑ Revisar projeto existente":
    arquivo = st.file_uploader("Anexe a planilha do projeto (.xlsx)", type=["xlsx"])
    if not arquivo:
        st.warning("‚ö†Ô∏è Para revisar um projeto, anexe a planilha primeiro.")
    if arquivo:
        nome_arquivo_entrada = arquivo.name
        try:
            df = pd.read_excel(arquivo)
            st.success("Planilha carregada com sucesso!")
            if len(df) > 1:
                opcoes = [f"{i} - {df.loc[i, 'NomeProjeto']} (Rev: {df.loc[i, 'UltimaModificacao']})" for i in df.index]
                idx = st.selectbox("Selecione a revis√£o base para editar", options=df.index, format_func=lambda i: opcoes[i])
                linha_selecionada = df.loc[idx].copy()
            else:
                linha_selecionada = df.loc[0].copy()
            if isinstance(linha_selecionada, pd.DataFrame):
                linha_selecionada = linha_selecionada.iloc[0]
            mostrar_campos = True
        except Exception as e:
            st.error(f"Erro ao ler a planilha: {e}")

elif modo == "üÜï Criar novo projeto":
    linha_selecionada = pd.Series({"NomeProjeto": ""})
    st.success("Novo projeto iniciado. Preencha os dados abaixo.")
    mostrar_campos = True

# üèóÔ∏è Levantamento das edifica√ß√µes (Novo c√≥digo)
if mostrar_campos:
    st.markdown("### üßæ Vers√£o do Projeto")
    linha_selecionada["NomeProjeto"] = st.text_input("Nome do Projeto", value=linha_selecionada.get("NomeProjeto", ""))
    nome_usuario = st.text_input("Seu nome", value="Vitor")
    linha_selecionada["UltimoUsuario"] = f"{nome_usuario} + Copilot"
    linha_selecionada["UltimaModificacao"] = datetime.now().strftime('%d/%m/%Y %H:%M')
    st.markdown("<div style='border-top: 6px solid #555; margin-top: 20px; margin-bottom: 20px'></div>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>üè¢ Levantamento das Edifica√ß√µes e Anexos</h3>", unsafe_allow_html=True)
    
    col_qtd_edificacoes, col_qtd_anexos = st.columns(2)
    with col_qtd_edificacoes:
        num_torres = st.number_input("Quantidade de torres/edifica√ß√µes residenciais", min_value=0, step=1, value=0)
    with col_qtd_anexos:
        num_anexos = st.number_input("Quantidade de anexos", min_value=0, step=1, value=0, help="Edifica√ß√µes t√©rreas com perman√™ncia de pessoas e de uso n√£o residencial.")

    torres = []
    st.markdown("### üè¢ Edifica√ß√µes Residenciais")
    if num_torres > 0:
        for i in range(int(num_torres)):
            st.markdown(f"**Edifica√ß√£o Residencial {i+1}**")
            col1, col2 = st.columns(2)
            with col1:
                nome = st.text_input(f"Nome da edifica√ß√£o {i+1}", key=f"nome_torre_{i}")
            with col2:
                area = st.number_input(f"√Årea da edifica√ß√£o {i+1} (m¬≤)", min_value=0.0, step=1.0, key=f"area_torre_{i}", value=0.0)
            terrea = st.radio(f"A edifica√ß√£o {i+1} √© t√©rrea?", ["Sim", "N√£o"], key=f"terrea_torre_{i}")
            
            num_pavimentos, um_ap_por_pav, subsolo_tecnico, numero_subsolos, area_subsolo, subsolo_ocupado, subsolo_menor_50, duplex, atico, altura = (1, None, "N√£o", "0", "Menor que 500m¬≤", "N√£o", "N√£o", "N√£o", "N√£o", 0.0)

            if terrea == "N√£o":
                num_pavimentos = st.number_input(f"N√∫mero de pavimentos da edifica√ß√£o {i+1}", min_value=2, step=1, key=f"num_pavimentos_torre_{i}", value=2)
                um_ap_por_pav = st.radio(f"A edifica√ß√£o {i+1} √© de um apartamento por pavimento?", ["Sim", "N√£o"], key=f"ap_por_pav_{i}")
                subsolo_tecnico = st.radio(f"Existe subsolo na edifica√ß√£o {i+1}?", ["N√£o", "Sim"], key=f"subsolo_tecnico_{i}")
                if subsolo_tecnico == "Sim":
                    st.markdown("<span style='color:red'>‚ö†Ô∏è Se tiver mais de 0,006m¬≤ por m¬≥ do pavimento ou sua laje de teto estiver acima, em pelo menos, 1,2m do perfil natural em pelo menos um lado, n√£o √© subsolo e deve ser considerado na altura</span>", unsafe_allow_html=True)
                    numero_subsolos = st.radio(f"Quantidade de subsolos na edifica√ß√£o {i+1}?", ["1", "Mais de 1"], key=f"numero_subsolos_{i}")
                    if numero_subsolos == "1":
                        area_subsolo = st.selectbox(f"√Årea do subsolo da edifica√ß√£o {i+1}", ["Menor que 500m¬≤", "Maior que 500m¬≤"], key=f"area_subsolo_{i}")
                    else:
                        area_subsolo = "Maior que 500m¬≤"
                    subsolo_ocupado = st.radio(f"Algum dos dois primeiros subsolos possui ocupa√ß√£o secund√°ria?", ["N√£o", "Sim"], key=f"subsolo_ocupado_{i}")
                    if subsolo_ocupado == "Sim":
                        subsolo_menor_50 = st.radio(f"A ocupa√ß√£o secund√°ria tem no m√°ximo 50m¬≤ em cada subsolo?", ["N√£o", "Sim"], key=f"subsolo_menor_50_{i}")
                duplex = st.radio(f"Existe duplex no √∫ltimo pavimento da edifica√ß√£o {i+1}?", ["N√£o", "Sim"], key=f"duplex_{i}")
                atico = st.radio(f"H√° pavimento de √°tico/casa de m√°quinas acima do √∫ltimo pavimento?", ["N√£o", "Sim"], key=f"atico_{i}")
                
                parte_superior = "Cota do primeiro pavimento do duplex" if duplex == "Sim" else "Cota de piso do √∫ltimo pavimento habitado"
                if subsolo_tecnico == "N√£o" and subsolo_ocupado == "N√£o":
                    parte_inferior = "cota de piso do pavimento mais baixo, exceto subsolos"
                elif subsolo_tecnico == "Sim" and subsolo_ocupado == "Sim" and subsolo_menor_50 == "N√£o":
                    parte_inferior = "cota de piso do subsolo em que a ocupa√ß√£o secund√°ria ultrapassa 50m¬≤"
                else:
                    parte_inferior = "cota de piso do pavimento mais baixo, exceto subsolos"
                st.markdown(f"üí° Altura da edifica√ß√£o {i+1} √©: **{parte_superior} - {parte_inferior}**")
                altura = st.number_input(f"Informe a altura da edifica√ß√£o {i+1} (m)", min_value=0.0, step=0.1, key=f"altura_torre_{i}", value=0.0)
            
            torres.append({
                "nome": nome, "area": area, "altura": altura, "terrea": terrea,
                "num_pavimentos": num_pavimentos, "um_ap_por_pav": um_ap_por_pav,
                "subsolo_tecnico": subsolo_tecnico, "numero_subsolos": numero_subsolos,
                "area_subsolo": area_subsolo, "subsolo_ocupado": subsolo_ocupado,
                "subsolo_menor_50": subsolo_menor_50, "duplex": duplex, "atico": atico,
            })

    anexos = []
    st.markdown("### üìé Anexos do Projeto")
    if num_anexos > 0:
        opcoes_uso_anexo = ["C-1; Com√©rcio com baixa carga de inc√™ndio; Artigos de metal, lou√ßas, artigos hospitalares e outros", "F-6; Clube social e Sal√£o de Festa; Buffets, clubes sociais, bingo, bilhares, tiro ao alvo, boliche", "F-8; Local para refei√ß√£o; Restaurantes, lanchonetes, bares, caf√©s, refeit√≥rios, cantinas", "G-1; Garagem sem acesso de p√∫blico e sem abastecimento; Garagens autom√°ticas, com manobristas", "G-2; Garagem com acesso de p√∫blico e sem abastecimento; Garagens coletivas sem automa√ß√£o", "J-2; Dep√≥sito de lixo; Carga geral do decreto de 300 MJ/m¬≤"]
        opcoes_carga_incendio = ["C-1; Com√©rcio varejista de alimentos; Minimercados, mercearias, armaz√©ns ‚Äî 300 MJ/m¬≤", "F-8; Cantinas privativas; Servi√ßos de alimenta√ß√£o ‚Äî 300 MJ/m¬≤", "F-6; Recrea√ß√£o e lazer n√£o especificados; Atividades diversas ‚Äî 600 MJ/m¬≤", "G-1/G-2; Estacionamento de ve√≠culos; Garagens autom√°ticas ou coletivas ‚Äî 300 MJ/m¬≤", "J-2; Dep√≥sito de lixo; Carga geral do decreto ‚Äî 300 MJ/m¬≤"]
        for i in range(int(num_anexos)):
            st.markdown(f"**Anexo {i+1}**")
            col_anexo_1, col_anexo_2 = st.columns(2)
            with col_anexo_1:
                nome = st.text_input(f"Nome do anexo {i+1}", key=f"nome_anexo_{i}")
            with col_anexo_2:
                area = st.number_input(f"√Årea do anexo {i+1} (m¬≤)", min_value=0.0, step=1.0, key=f"area_anexo_{i}", value=0.0)
            col_anexo_3, col_anexo_4 = st.columns(2)
            with col_anexo_3:
                uso = st.selectbox(f"Uso/Ocupa√ß√£o do anexo {i+1}", options=opcoes_uso_anexo, key=f"uso_anexo_{i}")
            with col_anexo_4:
                carga = st.selectbox(f"Carga de inc√™ndio do anexo {i+1}", options=opcoes_carga_incendio, key=f"carga_anexo_{i}")
            anexos.append({
                "nome": nome, "area": area, "uso": uso, "carga_incendio": carga,
                "terrea": "Sim", "num_pavimentos": 1, "um_ap_por_pav": None, "altura": 0.0
            })
    
    # Juntar todas as edifica√ß√µes
    todas_edificacoes = torres + anexos

    # üîÄ Bloco de Isolamento entre Edifica√ß√µes
    if len(todas_edificacoes) > 1:
        nomes_edificacoes = [e["nome"] for e in todas_edificacoes if e["nome"]]
        st.markdown("<div style='border-top: 6px solid #555; margin-top: 20px; margin-bottom: 20px'></div>", unsafe_allow_html=True)
        st.markdown("### üîÄ Isolamento entre Edifica√ß√µes")
        st.radio("H√° corpo de bombeiros com viatura de combate a inc√™ndio na cidade?", ["Sim", "N√£o"], key="bombeiros")

        col_init = st.columns(2)
        with col_init[0]:
            edf1_nome = st.selectbox("Edifica√ß√£o 1:", nomes_edificacoes, key="comparacao_edf1_main")
        with col_init[1]:
            edf2_nome = st.selectbox("Edifica√ß√£o 2:", [n for n in nomes_edificacoes if n != edf1_nome], key="comparacao_edf2_main")

        edf1_data = next((e for e in todas_edificacoes if e["nome"] == edf1_nome), None)
        edf2_data = next((e for e in todas_edificacoes if e["nome"] == edf2_nome), None)

        if edf1_data and edf2_data:
            acrescimo = 1.5 if st.session_state.bombeiros == "Sim" else 3.0
            
            # C√°lculo para Edifica√ß√£o 1
            st.markdown(f"**Fachada a usar na compara√ß√£o (Edifica√ß√£o 1 - {edf1_data['nome']}):** {fachada_edificacao(edf1_data)}")
            largura1 = st.number_input(f"Largura da fachada (Edifica√ß√£o 1)", min_value=0.0, key=f"largura_{edf1_data['nome']}", value=0.0)
            altura1 = st.number_input(f"Altura da fachada (Edifica√ß√£o 1)", min_value=0.0, key=f"altura_{edf1_data['nome']}", value=0.0)
            area1 = largura1 * altura1
            abertura1 = st.number_input(f"√Årea de abertura (Edifica√ß√£o 1)", min_value=0.0, key=f"abertura_{edf1_data['nome']}", value=0.0)
            porcentagem1 = (abertura1 / area1) * 100 if area1 > 0 else 0
            fator_x1 = max(largura1, altura1) / max(1.0, min(largura1, altura1))
            valor_tabela1 = buscar_valor_tabela(porcentagem1, fator_x1)
            menor_dim1 = min(largura1, altura1)
            distancia1 = (valor_tabela1 * menor_dim1) + acrescimo
            if "uso" in edf1_data or (edf1_data['terrea'] == "Sim" and edf1_data['area'] <= 750) or (edf1_data['terrea'] == "N√£o" and edf1_data['area'] <= 750 and edf1_data['altura'] < 12):
                distancia_tabela_simplificada1 = buscar_valor_tabela_simplificada(porcentagem1, edf1_data.get('num_pavimentos', 1))
                distancia1 = min(distancia1, distancia_tabela_simplificada1)
            st.metric(label=f"Dist√¢ncia de isolamento (Edifica√ß√£o 1)", value=f"{distancia1:.2f} m")
            
            # L√≥gica para a Edifica√ß√£o 2
            st.markdown(f"**Fachada a usar na compara√ß√£o (Edifica√ß√£o 2 - {edf2_data['nome']}):** {fachada_edificacao(edf2_data)}")
            largura2 = st.number_input(f"Largura da fachada (Edifica√ß√£o 2)", min_value=0.0, key=f"largura_{edf2_data['nome']}", value=0.0)
            altura2 = st.number_input(f"Altura da fachada (Edifica√ß√£o 2)", min_value=0.0, key=f"altura_{edf2_data['nome']}", value=0.0)
            area2 = largura2 * altura2
            abertura2 = st.number_input(f"√Årea de abertura (Edifica√ß√£o 2)", min_value=0.0, key=f"abertura_{edf2_data['nome']}", value=0.0)
            porcentagem2 = (abertura2 / area2) * 100 if area2 > 0 else 0
            fator_x2 = max(largura2, altura2) / max(1.0, min(largura2, altura2))
            valor_tabela2 = buscar_valor_tabela(porcentagem2, fator_x2)
            menor_dim2 = min(largura2, altura2)
            distancia2 = (valor_tabela2 * menor_dim2) + acrescimo

            # Aplica a regra para anexos e edifica√ß√µes residenciais que se enquadram na tabela simplificada
            if "uso" in edf2_data or (edf2_data['terrea'] == "Sim" and edf2_data['area'] <= 750) or (edf2_data['terrea'] == "N√£o" and edf2_data['area'] <= 750 and edf2_data['altura'] < 12):
                distancia_tabela_simplificada2 = buscar_valor_tabela_simplificada(porcentagem2, edf2_data.get('num_pavimentos', 1))
                distancia2 = min(distancia2, distancia_tabela_simplificada2)
            st.metric(label=f"Dist√¢ncia de isolamento (Edifica√ß√£o 2)", value=f"{distancia2:.2f} m")

        # Compara√ß√µes adicionais
        if st.button("‚ûï Adicionar nova compara√ß√£o"):
            if "comparacoes_extra" not in st.session_state:
                st.session_state.comparacoes_extra = []
            novo_id = len(st.session_state.comparacoes_extra)
            st.session_state.comparacoes_extra.append(novo_id)
        
        if "comparacoes_extra" in st.session_state:
            novas_comparacoes = []
            for idx in st.session_state.comparacoes_extra:
                st.markdown(f"---\n### üîÅ Compara√ß√£o Extra {idx + 1}")
                col_edf = st.columns(2)
                with col_edf[0]:
                    edf_a = st.selectbox("Edifica√ß√£o A", nomes_edificacoes, key=f"extra_edf_a_{idx}")
                with col_edf[1]:
                    edf_b = st.selectbox("Edifica√ß√£o B", [n for n in nomes_edificacoes if n != edf_a], key=f"extra_edf_b_{idx}")
        
                edf_a_data = next((e for e in todas_edificacoes if e["nome"] == edf_a), None)
                edf_b_data = next((e for e in todas_edificacoes if e["nome"] == edf_b), None)
        
                if edf_a_data and edf_b_data:
                    fachada_a = fachada_edificacao(edf_a_data)
                    fachada_b = fachada_edificacao(edf_b_data)
            
                    if fachada_a == fachada_b:
                        st.markdown(f"‚úÖ A fachada a analisar de **{edf_a}** e **{edf_b}** √©: **{fachada_a}**.")
                    else:
                        st.markdown(f"‚úÖ A fachada a analisar de **{edf_a}** √©: **{fachada_a}**.")
                        st.markdown(f"‚úÖ A fachada a analisar de **{edf_b}** √©: **{fachada_b}**.")
            
                    col_dim = st.columns(2)
                    with col_dim[0]:
                        largura_a = st.number_input("Largura fachada A (m)", min_value=0.0, key=f"largura_a_{idx}")
                        altura_a = st.number_input("Altura fachada A (m)", min_value=0.0, key=f"altura_a_{idx}")
                        area_a = largura_a * altura_a
                        abertura_a = st.number_input("√Årea de abertura A (m¬≤)", min_value=0.0, key=f"abertura_a_{idx}")
                        porcentagem_a = (abertura_a / area_a) * 100 if area_a > 0 else 0
            
                    with col_dim[1]:
                        largura_b = st.number_input("Largura fachada B (m)", min_value=0.0, key=f"largura_b_{idx}")
                        altura_b = st.number_input("Altura fachada B (m)", min_value=0.0, key=f"altura_b_{idx}")
                        area_b = largura_b * altura_b
                        abertura_b = st.number_input("√Årea de abertura B (m¬≤)", min_value=0.0, key=f"abertura_b_{idx}")
                        porcentagem_b = (abertura_b / area_b) * 100 if area_b > 0 else 0
            
                    fator_x_a = max(largura_a, altura_a) / max(1.0, min(largura_a, altura_a))
                    fator_x_b = max(largura_b, altura_b) / max(1.0, min(largura_b, altura_b))
                    valor_a = buscar_valor_tabela(porcentagem_a, fator_x_a)
                    valor_b = buscar_valor_tabela(porcentagem_b, fator_x_b)
                    menor_dim_a = min(largura_a, altura_a)
                    menor_dim_b = min(largura_b, altura_b)
                    acrescimo = 1.5 if st.session_state.bombeiros == "Sim" else 3.0
                    dist_a = (valor_a * menor_dim_a) + acrescimo
                    dist_b = (valor_b * menor_dim_b) + acrescimo
            
                    if "uso" in edf_a_data or (edf_a_data.get('terrea') == "Sim" and edf_a_data.get('area') <= 750) or (edf_a_data.get('terrea') == "N√£o" and edf_a_data.get('area') <= 750 and edf_a_data.get('altura') < 12):
                        dist_a = min(dist_a, buscar_valor_tabela_simplificada(porcentagem_a, edf_a_data.get('num_pavimentos', 1)))
                    if "uso" in edf_b_data or (edf_b_data.get('terrea') == "Sim" and edf_b_data.get('area') <= 750) or (edf_b_data.get('terrea') == "N√£o" and edf_b_data.get('area') <= 750 and edf_b_data.get('altura') < 12):
                        dist_b = min(dist_b, buscar_valor_tabela_simplificada(porcentagem_b, edf_b_data.get('num_pavimentos', 1)))
            
                    st.metric("Dist√¢ncia de isolamento A", f"{dist_a:.2f} m")
                    st.metric("Dist√¢ncia de isolamento B", f"{dist_b:.2f} m")
            
                    if st.button("‚ùå Remover compara√ß√£o", key=f"remover_comparacao_{idx}"):
                        st.session_state.comparacoes_extra.remove(idx)
                        st.experimental_rerun()
                
                    novas_comparacoes.append(idx)
            st.session_state.comparacoes_extra = novas_comparacoes

    # --- IN√çCIO: NOVO BLOCO DE L√ìGICA DE ISOLAMENTO ---
    if len(todas_edificacoes) > 1:
        st.markdown("<div style='border-top: 6px solid #555; margin-top: 20px; margin-bottom: 20px'></div>", unsafe_allow_html=True)
        st.markdown("### üîÄ Defini√ß√£o de Tratamento por Edifica√ß√£o")
        
        # Filtra apenas as edifica√ß√µes residenciais (torres) para o seletor de "conjunta"
        nomes_torres = [t['nome'] for t in torres if t['nome']]

        for i, edificacao in enumerate(todas_edificacoes):
            if edificacao["nome"]:
                tratamento_key = f"tratamento_{edificacao['nome']}_{i}"
                conjunta_key = f"conjunta_com_{edificacao['nome']}_{i}"
                
                tratamento = st.radio(
                    f"A edifica√ß√£o **{edificacao['nome']}** ser√° tratada independente ou conjunta com outra?",
                    ["Independente", "Conjunta"],
                    key=tratamento_key
                )
                edificacao['tratamento'] = tratamento
                
                if tratamento == "Conjunta":
                    if not nomes_torres:
                        st.warning("‚ö†Ô∏è N√£o h√° edifica√ß√µes residenciais (torres) para serem selecionadas para o enquadramento conjunto.")
                        edificacao['edificacao_conjunta'] = None
                    else:
                        edificacao['edificacao_conjunta'] = st.selectbox(
                            f"Qual edifica√ß√£o inserir com **{edificacao['nome']}**?",
                            options=nomes_torres,
                            key=conjunta_key
                        )
                else:
                    edificacao['edificacao_conjunta'] = None
    
        # Campo de coment√°rios sobre isolamento
        st.markdown("<div style='border-top: 2px solid #ddd; margin-top: 20px; margin-bottom: 20px'></div>", unsafe_allow_html=True)
        st.markdown("### üìù Coment√°rios sobre Isolamento de Risco")
        st.text_area("Insira aqui suas observa√ß√µes sobre a an√°lise de isolamento de risco.", key="comentario_isolamento_geral")
    # --- FIM: NOVO BLOCO DE L√ìGICA DE ISOLAMENTO ---

    # üßØ Tabela resumo de medidas de seguran√ßa e Detalhamento por medida de seguran√ßa
    st.markdown("<div style='border-top: 6px solid #555; margin-top: 20px; margin-bottom: 20px'></div>", unsafe_allow_html=True)
    st.markdown("## üîç Medidas de Seguran√ßa por Edifica√ß√£o")
    
    # Consolida as √°reas e informa√ß√µes das edifica√ß√µes antes da exibi√ß√£o e exporta√ß√£o
    edificacoes_consolidadas = []
    
    # Dicion√°rio para rastrear as edifica√ß√µes j√° inclu√≠das para evitar duplicidade
    nomes_ja_consolidados = set()

    for i, edificacao in enumerate(todas_edificacoes):
        if edificacao["nome"] in nomes_ja_consolidados:
            continue

        if edificacao.get("tratamento") == "Conjunta":
            nome_principal = edificacao.get("edificacao_conjunta")
            if nome_principal and nome_principal not in nomes_ja_consolidados:
                edificacao_principal = next((t for t in todas_edificacoes if t["nome"] == nome_principal), None)
                if edificacao_principal:
                    # Cria uma nova entrada para a edifica√ß√£o principal com a √°rea combinada
                    edificacao_combinada = edificacao_principal.copy()
                    edificacao_combinada['area_original'] = edificacao_principal['area']
                    edificacao_combinada['areas_combinadas_com'] = [nome_principal]
                    
                    for outra_edificacao in todas_edificacoes:
                        if outra_edificacao.get("edificacao_conjunta") == nome_principal:
                            edificacao_combinada['area'] += outra_edificacao['area']
                            edificacao_combinada['areas_combinadas_com'].append(outra_edificacao['nome'])
                    
                    edificacoes_consolidadas.append(edificacao_combinada)
                    nomes_ja_consolidados.add(nome_principal)
        else:
            # Tratamento Independente
            edificacoes_consolidadas.append(edificacao)
            nomes_ja_consolidados.add(edificacao["nome"])

    todas_edificacoes = edificacoes_consolidadas

    if todas_edificacoes:
        for i, edificacao in enumerate(todas_edificacoes):
            nome_edificacao = edificacao.get("nome", f"Edifica√ß√£o {i+1}")
            st.markdown(f"### üè¢ {nome_edificacao}")

            altura_valor = edificacao.get("altura", 0)
            faixa = faixa_altura(altura_valor)
            resumo = medidas_por_faixa(faixa)
            notas = notas_relevantes(resumo, altura_valor)
            
            st.markdown("### Tabela de Medidas de Seguran√ßa Aplic√°veis")
            df_resumo = pd.DataFrame.from_dict(resumo, orient='index', columns=["Aplica√ß√£o"])
            st.table(df_resumo)

            if notas:
                st.markdown("### Notas Espec√≠ficas")
                for nota in notas:
                    st.markdown(f"- {nota}")
            
            st.markdown("### Detalhamento")
            
            # Detalhamento para "Acesso de Viatura"
            if "X" in resumo.get("Acesso de Viatura na Edifica√ß√£o", ""):
                with st.expander(f"üîπ Acesso de Viatura na Edifica√ß√£o - {nome_edificacao}"):
                    st.markdown("**Ser√° previsto hidrante de recalque a n√£o mais que 20m do limite da edifica√ß√£o?**")
                    hidrante_recalque = st.radio("Resposta:", ["Sim", "N√£o"], key=f"hidrante_recalque_{i}")
                    st.markdown("<span style='color:red'>‚ö†Ô∏è O hidrante de recalque a menos de 20m anula as exig√™ncias a respeito do acesso de viaturas na edifica√ß√£o.</span>", unsafe_allow_html=True)
                    st.markdown("‚úÖ O port√£o de acesso deve ter, no m√≠nimo, **4m de largura** e **4,5m de altura**.")
                    if hidrante_recalque == "N√£o":
                        st.markdown("‚úÖ As vias devem ter, no m√≠nimo, **6m de largura** e **4,5m de altura**, al√©m de suportar viaturas de **25 toneladas em dois eixos**.")
            
            # Detalhamento para "Seguran√ßa Estrutural"
            if "X" in resumo.get("Seguran√ßa Estrutural contra Inc√™ndio", ""):
                with st.expander(f"üîπ Seguran√ßa Estrutural contra Inc√™ndio - {nome_edificacao}"):
                    resposta_trrf = ""
                    mostrar_trrf_adotado = False
                    
                    if edificacao.get("terrea") == "Sim":
                        resposta_estrutura_terrea = st.radio(
                            "H√° algum elemento estrutural que seu colapso comprometa a estabilidade de elementos de compartimenta√ß√£o ou isolamento?",
                            ["N√£o", "Sim"], key=f"estrutura_terrea_{i}"
                        )
                        if resposta_estrutura_terrea == "Sim":
                            resposta_trrf = "‚ö†Ô∏è A edifica√ß√£o deve comprovar TRRF de 30min para elementos estruturais."
                            st.markdown(f"<span style='color:red'>{resposta_trrf}</span>", unsafe_allow_html=True)
                            mostrar_trrf_adotado = True
                        else:
                            resposta_trrf = "‚úÖ A edifica√ß√£o est√° isenta de comprova√ß√£o de TRRF para elementos estruturais."
                            st.markdown(resposta_trrf)
                    else:
                        area = edificacao.get("area", 0)
                        subsolo_tecnico = edificacao.get("subsolo_tecnico", "N√£o")
                        numero_subsolos = edificacao.get("numero_subsolos", "0")
                        area_subsolo = edificacao.get("area_subsolo", "Menor que 500m¬≤")
                        
                        altura_menor_igual_12 = altura_valor <= 12
                        area_menor_1500 = area < 1500
                        area_maior_igual_1500 = area >= 1500
                        subsolo_simples = numero_subsolos == "1" and area_subsolo == "Menor que 500m¬≤"
                        subsolo_complexo = numero_subsolos != "1" or area_subsolo == "Maior que 500m¬≤"
                        sem_subsolo = subsolo_tecnico == "N√£o"
                        
                        if altura_menor_igual_12 and area_menor_1500 and (sem_subsolo or subsolo_simples):
                            resposta_trrf = "‚úÖ A edifica√ß√£o est√° isenta de comprova√ß√£o de TRRF para elementos estruturais."
                        elif altura_menor_igual_12 and area_menor_1500 and subsolo_complexo:
                            resposta_trrf = "‚ö†Ô∏è Apenas o(s) subsolo(s) dever√£o apresentar comprova√ß√£o de TRRF para elementos estruturais."
                            mostrar_trrf_adotado = True
                        elif (altura_valor > 12 or area_maior_igual_1500) and (sem_subsolo or subsolo_simples):
                            resposta_trrf = "‚ö†Ô∏è Cada pavimento dever√° apresentar comprova√ß√£o de TRRF para elementos estruturais. Cada pavimento tem seu TRRF determinado de acordo com seu uso e nunca inferior ao do pavimento superior (o subsolo absorve o TRRF do pavimento superior)."
                            mostrar_trrf_adotado = True
                        elif (altura_valor > 12 or area_maior_igual_1500) and subsolo_complexo:
                            resposta_trrf = "‚ö†Ô∏è Cada pavimento dever√° apresentar comprova√ß√£o de TRRF para elementos estruturais. Cada pavimento tem seu TRRF determinado de acordo com seu uso e nunca inferior ao do pavimento superior."
                            mostrar_trrf_adotado = True
                        st.markdown(resposta_trrf)
                        
                        if "Cada pavimento dever√° apresentar comprova√ß√£o de TRRF" in resposta_trrf:
                            cobertura_check = st.radio("Algum dos seguintes itens √© verdadeiro:\n\nI. A cobertura tem perman√™ncia de pessoas ou estoque de algum material?\nII. Faz parte de alguma rota de fuga?\nIII. Seu colapso estrutural compromete a estrutura principal ou paredes externas?", ["N√£o", "Sim"], index=0, key=f"cobertura_trrf_{i}")
                            if cobertura_check == "Sim":
                                st.markdown("‚ö†Ô∏è A cobertura deve ter o mesmo TRRF da estrutura principal.")
                            else:
                                st.markdown("‚úÖ A cobertura est√° isenta de comprova√ß√£o de TRRF para os elementos estruturais.")
                        
                    if mostrar_trrf_adotado:
                        if "Cada pavimento dever√° apresentar comprova√ß√£o de TRRF" in resposta_trrf or "subsolo(s) dever√£o apresentar comprova√ß√£o de TRRF" in resposta_trrf:
                            st.image("imagens/Tempos requeridos de resist√™ncia ao fogo.png", use_container_width=True)
                        st.text_area("TRRF adotado:", value="", key=f"trrf_adotado_{i}")
                    st.text_area("Observa√ß√µes sobre seguran√ßa estrutural", value="", key=f"comentario_estrutural_{i}")

            # Detalhamento para outras medidas
            for medida, aplicacao in resumo.items():
                if "X" in aplicacao and medida not in ["Acesso de Viatura na Edifica√ß√£o", "Seguran√ßa Estrutural contra Inc√™ndio"]:
                    with st.expander(f"üîπ {medida} - {nome_edificacao}"):
                        st.markdown(f"Conte√∫do t√©cnico sobre **{medida.lower()}**...")
                        if "¬π" in aplicacao: st.markdown("üìå Observa√ß√£o especial: ver nota 1")
                        elif "¬≤" in aplicacao: st.markdown("üìå Observa√ß√£o especial: ver nota 2")
                        elif "¬≥" in aplicacao: st.markdown("üìå Observa√ß√£o especial: ver nota 3")
                        elif "‚Å¥" in aplicacao: st.markdown("üìå Observa√ß√£o especial: ver nota 4")
    else:
        st.warning("Cadastre as edifica√ß√µes para ver as medidas de seguran√ßa aplic√°veis.")

    # üì• Exporta√ß√£o final (Adaptado para m√∫ltiplas edifica√ß√µes)
    st.markdown("## üì• Exportar planilha atualizada")
    if todas_edificacoes:
        df_completo = pd.DataFrame(todas_edificacoes)
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_completo.to_excel(writer, index=False, sheet_name='Edifica√ß√µes')
        output.seek(0)
        
        nome_projeto = linha_selecionada.get("NomeProjeto", "ProjetoSemNome")
        nome_arquivo_saida = gerar_nome_arquivo(nome_projeto, arquivo.name if arquivo else None)
        
        st.download_button(
            label="üì• Baixar Planilha Atualizada",
            data=output.getvalue(),
            file_name=nome_arquivo_saida,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key="download_button_planilha_final"
        )
