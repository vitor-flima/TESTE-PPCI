import streamlit as st
import pandas as pd
import io
import re
from datetime import datetime

st.set_page_config(page_title="Gest√£o de Projetos PPCI", layout="centered")
st.title("üìÅ Ferramenta de Projetos PPCI")

# Fun√ß√µes auxiliares
def gerar_nome_arquivo(nome_projeto, nome_arquivo_entrada=None):
    if nome_arquivo_entrada:
        match = re.search(r"-R(\d+)", nome_arquivo_entrada)
        numero = int(match.group(1)) + 1 if match else 1
        novo_nome = re.sub(r"-R\d+", f"-R{numero:02}", nome_arquivo_entrada)
    else:
        novo_nome = f"checklistINC_{nome_projeto}-R00.xlsx"
    return novo_nome

def faixa_altura(h):
    if h == 0:
        return "T√©rrea"
    elif h < 6:
        return "H < 6 m"
    elif h < 12:
        return "6 ‚â§ H < 12 m"
    elif h < 23:
        return "12 ‚â§ H < 23 m"
    elif h < 30:
        return "23 ‚â§ H < 30 m"
    else:
        return "Acima de 30 m"

def medidas_por_faixa(faixa):
    tabela = {
        "Acesso de Viatura na Edifica√ß√£o": ["X"] * 6,
        "Seguran√ßa Estrutural contra Inc√™ndio": ["X"] * 6,
        "Compartimenta√ß√£o Horizontal ou de √Årea": ["X‚Å¥"] * 6,
        "Compartimenta√ß√£o de Verticais": ["", "", "", "X¬≤", "X¬≤", "X¬≤"],
        "Controle de Materiais de Acabamento": ["", "", "", "X", "X", "X"],
        "Sa√≠das de Emerg√™ncia": ["X", "X", "X", "X", "X", "X¬π"],
        "Brigada de Inc√™ndio": ["X"] * 6,
        "Ilumina√ß√£o de Emerg√™ncia": ["X"] * 6,
        "Alarme de Inc√™ndio": ["X¬≥", "X¬≥", "X¬≥", "X¬≥", "X¬≥", "X"],
        "Sinaliza√ß√£o de Emerg√™ncia": ["X"] * 6,
        "Extintores": ["X"] * 6,
        "Hidrantes e Mangotinhos": ["X"] * 6
    }
    faixas = ["T√©rrea", "H < 6 m", "6 ‚â§ H < 12 m", "12 ‚â§ H < 23 m", "23 ‚â§ H < 30 m", "Acima de 30 m"]
    idx = faixas.index(faixa)
    return {medida: tabela[medida][idx] for medida in tabela}

def notas_relevantes(resumo, altura):
    notas = []
    if altura >= 80:
        notas.append("1 ‚Äì Deve haver Elevador de Emerg√™ncia para altura maior que 80 m")
    if any("X¬≤" in v for v in resumo.values()):
        notas.append("2 ‚Äì Pode ser substitu√≠da por sistema de controle de fuma√ßa somente nos √°trios")
    if any("X¬≥" in v for v in resumo.values()):
        notas.append("3 ‚Äì O sistema de alarme pode ser setorizado na central junto √† portaria, desde que tenha vigil√¢ncia 24 horas")
    if any("X‚Å¥" in v for v in resumo.values()):
        notas.append("4 ‚Äì Devem ser atendidas somente as regras espec√≠ficas de compartimenta√ß√£o entre unidades aut√¥nomas")
    return notas

# Interface principal
modo = st.radio("Como deseja come√ßar?", ["üìÑ Revisar projeto existente", "üÜï Criar novo projeto"])
df = pd.DataFrame()
arquivo = None
nome_arquivo_entrada = None
linha_selecionada = None

if modo == "üìÑ Revisar projeto existente":
    arquivo = st.file_uploader("Anexe a planilha do projeto (.xlsx)", type=["xlsx"])
    if arquivo:
        nome_arquivo_entrada = arquivo.name
        try:
            df = pd.read_excel(arquivo)
            st.success("Planilha carregada com sucesso!")
            if len(df) > 1:
                opcoes = [f"{i} - {df.loc[i, 'NomeProjeto']} (Rev: {df.loc[i, 'UltimaModificacao']})" for i in df.index]
                idx = st.selectbox("Selecione a revis√£o base para editar", options=df.index, format_func=lambda i: opcoes[i])
                linha_selecionada = df.loc[idx].copy()
            else:
                linha_selecionada = df.loc[0].copy()
            if isinstance(linha_selecionada, pd.DataFrame):
                linha_selecionada = linha_selecionada.iloc[0]
        except Exception as e:
            st.error(f"Erro ao ler a planilha: {e}")

elif modo == "üÜï Criar novo projeto":
    linha_selecionada = pd.Series({
        "NomeProjeto": "",
        "Ocupacao": "A-2",
        "Area": 100.0,
        "Altura": 3.0,
        "UltimoUsuario": "",
        "UltimaModificacao": datetime.now().strftime('%d/%m/%Y %H:%M'),
        "Anexo1": "", "Anexo2": "", "Anexo3": "", "Anexo4": "", "Anexo5": "",
        "SubsoloTecnico": "", "SubsoloComOcupacao": "", "SubsoloMenor50m2": "",
        "DuplexUltimoPavimento": "", "√ÅticoOuCasaMaquinas": "",
        "ComentarioAltura": ""
    })
    st.success("Novo projeto iniciado. Preencha os dados abaixo.")

if linha_selecionada is not None:
    # üßæ Vers√£o do Projeto
    st.markdown("### üßæ Vers√£o do Projeto")
    linha_selecionada["NomeProjeto"] = st.text_input("Nome do Projeto", value=linha_selecionada.get("NomeProjeto", ""))
    nome_usuario = st.text_input("Seu nome", value="Vitor")
    linha_selecionada["UltimoUsuario"] = f"{nome_usuario} + Copilot"
    linha_selecionada["UltimaModificacao"] = datetime.now().strftime('%d/%m/%Y %H:%M')

    # üìé Anexos do Projeto
    st.markdown("### üìé Anexos do Projeto")
    if st.radio("Adicionar anexos?", ["N√£o", "Sim"]) == "Sim":
        qtd_anexos = st.number_input("Selecione a quantidade de anexos", min_value=1, max_value=5, step=1)
        for i in range(1, 6):
            linha_selecionada[f"Anexo{i}"] = st.text_input(f"Insira o nome do anexo {i}") if i <= qtd_anexos else ""

    # üß± Enquadramento da edifica√ß√£o A-2
st.markdown("### üß± Enquadramento da edifica√ß√£o A-2")
linha_selecionada["Area"] = st.number_input("√Årea da edifica√ß√£o A-2 (m¬≤)", value=float(linha_selecionada.get("Area", 100.0)))

# ‚úÖ Novo campo: edifica√ß√£o t√©rrea
linha_selecionada["EdificacaoTerrea"] = st.radio(
    "A edifica√ß√£o √© t√©rrea?",
    ["N√£o", "Sim"],
    index=0
)

st.markdown("### üèóÔ∏è Altura da edifica√ß√£o")

# Subsolo ‚Äî s√≥ aparece se N√ÉO for t√©rrea
if linha_selecionada["EdificacaoTerrea"] == "N√£o":
    linha_selecionada["SubsoloTecnico"] = st.radio(
        "Existe subsolo de estacionamento, √°rea t√©cnica ou sem ocupa√ß√£o de pessoas?",
        ["N√£o", "Sim"]
    )

    if linha_selecionada["SubsoloTecnico"] == "Sim":
        st.markdown(
            "<span style='color:red'>‚ö†Ô∏è Se tiver mais de 0,006m¬≤ por m¬≥ do pavimento ou sua laje de teto estiver acima, em pelo menos, 1,2m do perfil natural em pelo menos um lado, n√£o √© subsolo e deve ser considerado na altura</span>",
            unsafe_allow_html=True
        )

        linha_selecionada["NumeroSubsolos"] = st.radio(
            "Qual a quantidade de subsolo?",
            ["1", "Mais de 1"]
        )

        if linha_selecionada["NumeroSubsolos"] == "1":
            linha_selecionada["AreaSubsolo"] = st.selectbox(
                "√Årea do subsolo:",
                ["Menor que 500m¬≤", "Maior que 500m¬≤"]
            )

        linha_selecionada["SubsoloComOcupacao"] = st.radio(
            "Um dos dois primeiros subsolos abaixo do t√©rreo possui ocupa√ß√£o secund√°ria?",
            ["N√£o", "Sim"]
        )
        if linha_selecionada["SubsoloComOcupacao"] == "Sim":
            linha_selecionada["SubsoloMenor50m2"] = st.radio(
                "Essa ocupa√ß√£o secund√°ria tem no m√°ximo 50m¬≤ em cada subsolo?",
                ["N√£o", "Sim"]
            )

# ‚úÖ Campos sempre vis√≠veis ‚Äî fora do bloco de subsolo
if linha_selecionada is not None and isinstance(linha_selecionada, (dict, pd.Series)):
    if linha_selecionada["EdificacaoTerrea"] == "N√£o":
        linha_selecionada["DuplexUltimoPavimento"] = st.radio(
            "Existe duplex no √∫ltimo pavimento?",
            ["N√£o", "Sim"]
        )

        if "AticoOuCasaMaquinas" not in linha_selecionada:
            linha_selecionada["AticoOuCasaMaquinas"] = ""

        linha_selecionada["√ÅticoOuCasaMaquinas"] = st.radio(
            "H√° pavimento de √°tico/casa de m√°quinas/casa de bombas acima do √∫ltimo pavimento?",
            ["N√£o", "Sim"]
        )

# üí° Explica√ß√£o da altura (antes do campo de entrada)
if linha_selecionada is not None and isinstance(linha_selecionada, (dict, pd.Series)):
    # Garantir que todos os campos existem
    for campo in ["SubsoloTecnico", "SubsoloComOcupacao", "SubsoloMenor50m2", "DuplexUltimoPavimento"]:
        if campo not in linha_selecionada:
            linha_selecionada[campo] = "N√£o"

    # Definir vari√°veis seguras
    s1 = linha_selecionada["SubsoloTecnico"]
    s2 = linha_selecionada["SubsoloComOcupacao"]
    s3 = linha_selecionada["SubsoloMenor50m2"]
    duplex = linha_selecionada["DuplexUltimoPavimento"]

    # L√≥gica de altura
    if duplex == "Sim":
        parte_superior = "Cota do primeiro pavimento do duplex"
    else:
        parte_superior = "Cota de piso do √∫ltimo pavimento habitado"

    if s1 == "N√£o" and s2 == "N√£o":
        parte_inferior = "cota de piso do pavimento mais baixo, exceto subsolos"
    elif s1 == "Sim" and s2 == "Sim" and s3 == "N√£o":
        parte_inferior = "cota de piso do subsolo em que a ocupa√ß√£o secund√°ria ultrapassa 50m¬≤"
    else:
        parte_inferior = "cota de piso do pavimento mais baixo, exceto subsolos"

    explicacao = f"üí° Altura da edifica√ß√£o √©: {parte_superior} - {parte_inferior}"
    st.markdown(explicacao)

    # Campo de entrada da altura
    if "Altura" not in linha_selecionada:
        linha_selecionada["Altura"] = 3.0
    linha_selecionada["Altura"] = st.number_input(
        "Altura da edifica√ß√£o (m)",
        value=float(linha_selecionada["Altura"])
    )


    # üßØ Tabela resumo de medidas de seguran√ßa
    faixa = faixa_altura(linha_selecionada["Altura"])
    resumo = medidas_por_faixa(faixa)
    notas = notas_relevantes(resumo, linha_selecionada["Altura"])

    st.markdown("### üîç Medidas de Seguran√ßa Aplic√°veis")
    df_resumo = pd.DataFrame.from_dict(resumo, orient='index', columns=["Aplica√ß√£o"])
    st.table(df_resumo)

    # üìå Notas espec√≠ficas
    if notas:
        st.markdown("### üìå Notas Espec√≠ficas")
        for nota in notas:
            st.markdown(f"- {nota}")

    # üóíÔ∏è Coment√°rios do projetista
    st.markdown("### üóíÔ∏è Coment√°rios sobre este t√≥pico")
    linha_selecionada["ComentarioAltura"] = st.text_area(
        "Observa√ß√µes, justificativas ou d√∫vidas sobre altura e medidas aplic√°veis",
        value=linha_selecionada.get("ComentarioAltura", "")
    )

    # üîç Detalhamento por medida de seguran√ßa
st.markdown("## üßØ Detalhamento por medida de seguran√ßa")

if linha_selecionada is not None and isinstance(linha_selecionada, (dict, pd.Series)):
    altura_valor = linha_selecionada.get("Altura", 0)
    faixa = faixa_altura(altura_valor)
    resumo = medidas_por_faixa(faixa)

    for medida, aplicacao in resumo.items():
        if "X" in aplicacao:
            # üîπ T√≥pico espec√≠fico: Acesso de Viatura na Edifica√ß√£o
            if medida == "Acesso de Viatura na Edifica√ß√£o":
                with st.expander(f"üîπ {medida}"):
                    st.markdown("**Ser√° previsto hidrante de recalque a n√£o mais que 20m do limite da edifica√ß√£o?**")
                    hidrante_recalque = st.radio("Resposta:", ["Sim", "N√£o"], key="hidrante_recalque")
                    st.markdown(
                        "<span style='color:red'>‚ö†Ô∏è O hidrante de recalque a menos de 20m anula as exig√™ncias a respeito do acesso de viaturas na edifica√ß√£o.</span>",
                        unsafe_allow_html=True
                    )
                    st.markdown("‚úÖ O port√£o de acesso deve ter, no m√≠nimo, **4m de largura** e **4,5m de altura**.")
                    if hidrante_recalque == "N√£o":
                        st.markdown("‚úÖ As vias devem ter, no m√≠nimo, **6m de largura** e **4,5m de altura**, al√©m de suportar viaturas de **25 toneladas em dois eixos**.")

            # üîπ T√≥pico espec√≠fico: Seguran√ßa Estrutural contra Inc√™ndio
            elif medida == "Seguran√ßa Estrutural contra Inc√™ndio":
                with st.expander(f"üîπ {medida}"):
            # ‚úÖ Condi√ß√£o 1: Edifica√ß√£o t√©rrea ‚Äî isenta, sem considerar altura ou √°rea
            if linha_selecionada.get("EdificacaoTerrea") == "Sim":
                st.markdown("‚úÖ A edifica√ß√£o est√° isenta de comprova√ß√£o de TRRF para elementos estruturais.")
    
            # ‚úÖ Condi√ß√£o 2: N√£o t√©rrea ‚Äî aplicar l√≥gica baseada em altura, √°rea e subsolo
            else:
                altura = linha_selecionada.get("Altura", 0)
                area = linha_selecionada.get("Area", 0)
                subsolo_tecnico = linha_selecionada.get("SubsoloTecnico", "N√£o")
                numero_subsolos = linha_selecionada.get("NumeroSubsolos", "1")
                area_subsolo = linha_selecionada.get("AreaSubsolo", "Menor que 500m¬≤")
    
                subsolo_pequeno = numero_subsolos == "1" and area_subsolo == "Menor que 500m¬≤"
                subsolo_grande = numero_subsolos != "1" or area_subsolo == "Maior que 500m¬≤"
    
                if altura <= 12 and area < 500 and (subsolo_tecnico == "N√£o" or subsolo_pequeno):
                    st.markdown("‚úÖ A edifica√ß√£o est√° isenta de comprova√ß√£o de TRRF para elementos estruturais.")
                elif altura <= 12 and area >= 1500 and subsolo_grande:
                    st.markdown("‚ö†Ô∏è Apenas o(s) subsolo(s) dever√° apresentar comprova√ß√£o de TRRF para elementos estruturais.")
                elif altura > 12 or area >= 1500:
                    if subsolo_grande:
                        st.markdown("‚ö†Ô∏è Cada pavimento dever√° apresentar comprova√ß√£o de TRRF para elementos estruturais, com cada pavimento tendo o seu TRRF determinado de acordo com seu uso e nunca inferior ao do pavimento superior.")
                    else:
                        st.markdown("‚ö†Ô∏è A edifica√ß√£o dever√° apresentar comprova√ß√£o de TRRF conforme uso e altura.")
                else:
                    st.markdown("‚ÑπÔ∏è Situa√ß√£o n√£o prevista explicitamente. Verificar caso espec√≠fico com base na NBR 14432.")

        # Campo opcional para observa√ß√µes
        linha_selecionada["ComentarioEstrutural"] = st.text_area(
            "Observa√ß√µes sobre seguran√ßa estrutural",
            value=linha_selecionada.get("ComentarioEstrutural", "")
        )


            # üîπ Outros t√≥picos gen√©ricos
            else:
                with st.expander(f"üîπ {medida}"):
                    st.markdown(f"Conte√∫do t√©cnico sobre **{medida.lower()}**...")
                    if "¬π" in aplicacao:
                        st.markdown("üìå Observa√ß√£o especial: ver nota 1")
                    elif "¬≤" in aplicacao:
                        st.markdown("üìå Observa√ß√£o especial: ver nota 2")
                    elif "¬≥" in aplicacao:
                        st.markdown("üìå Observa√ß√£o especial: ver nota 3")
                    elif "‚Å¥" in aplicacao:
                        st.markdown("üìå Observa√ß√£o especial: ver nota 4")


    # üì• Exporta√ß√£o final
st.markdown("## üì• Exportar planilha atualizada")

if linha_selecionada is not None:
    nova_linha_df = pd.DataFrame([linha_selecionada])

    if arquivo and not df.empty:
        df_atualizado = pd.concat([df, nova_linha_df], ignore_index=True)
    else:
        df_atualizado = nova_linha_df

    nome_arquivo_saida = gerar_nome_arquivo(linha_selecionada["NomeProjeto"], nome_arquivo_entrada)

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_atualizado.to_excel(writer, index=False, sheet_name='Projetos')
    output.seek(0)

    st.download_button(
        label="üì• Baixar Planilha Atualizada",
        data=output.getvalue(),
        file_name=nome_arquivo_saida,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        key="download_button_planilha_final"  # ‚úÖ chave √∫nica
    )
