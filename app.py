# üì¶ Importa√ß√µes
import streamlit as st
import pandas as pd
import io
import re
from datetime import datetime

# ‚öôÔ∏è Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gest√£o de Projetos PPCI", layout="centered")
st.title("üìÅ Ferramenta de Projetos PPCI")

# üß† Fun√ß√µes auxiliares
def gerar_nome_arquivo(nome_projeto, nome_arquivo_entrada=None):
    if nome_arquivo_entrada:
        match = re.search(r"-R(\d+)", nome_arquivo_entrada)
        numero = int(match.group(1)) + 1 if match else 1
        novo_nome = re.sub(r"-R\d+", f"-R{numero:02}", nome_arquivo_entrada)
    else:
        novo_nome = f"checklistINC_{nome_projeto}-R00.xlsx"
    return novo_nome

def faixa_altura(h):
    if h == 0:
        return "T√©rrea"
    elif h < 6:
        return "H < 6 m"
    elif h < 12:
        return "6 ‚â§ H < 12 m"
    elif h < 23:
        return "12 ‚â§ H < 23 m"
    elif h < 30:
        return "23 ‚â§ H < 30 m"
    else:
        return "Acima de 30 m"

def medidas_por_faixa(faixa):
    tabela = {
        "Acesso de Viatura na Edifica√ß√£o": ["X"] * 6,
        "Seguran√ßa Estrutural contra Inc√™ndio": ["X"] * 6,
        "Compartimenta√ß√£o Horizontal ou de √Årea": ["X‚Å¥"] * 6,
        "Compartimenta√ß√£o de Verticais": ["", "", "", "X¬≤", "X¬≤", "X¬≤"],
        "Controle de Materiais de Acabamento": ["", "", "", "X", "X", "X"],
        "Sa√≠das de Emerg√™ncia": ["X", "X", "X", "X", "X", "X¬π"],
        "Brigada de Inc√™ndio": ["X"] * 6,
        "Ilumina√ß√£o de Emerg√™ncia": ["X"] * 6,
        "Alarme de Inc√™ndio": ["X¬≥", "X¬≥", "X¬≥", "X¬≥", "X¬≥", "X"],
        "Sinaliza√ß√£o de Emerg√™ncia": ["X"] * 6,
        "Extintores": ["X"] * 6,
        "Hidrantes e Mangotinhos": ["X"] * 6
    }
    faixas = ["T√©rrea", "H < 6 m", "6 ‚â§ H < 12 m", "12 ‚â§ H < 23 m", "23 ‚â§ H < 30 m", "Acima de 30 m"]
    idx = faixas.index(faixa)
    return {medida: tabela[medida][idx] for medida in tabela}

def notas_relevantes(resumo, altura):
    notas = []
    if altura >= 80:
        notas.append("1 ‚Äì Deve haver Elevador de Emerg√™ncia para altura maior que 80 m")
    if any("X¬≤" in v for v in resumo.values()):
        notas.append("2 ‚Äì Pode ser substitu√≠da por sistema de controle de fuma√ßa somente nos √°trios")
    if any("X¬≥" in v for v in resumo.values()):
        notas.append("3 ‚Äì O sistema de alarme pode ser setorizado na central junto √† portaria, desde que tenha vigil√¢ncia 24 horas")
    if any("X‚Å¥" in v for v in resumo.values()):
        notas.append("4 ‚Äì Devem ser atendidas somente as regras espec√≠ficas de compartimenta√ß√£o entre unidades aut√¥nomas")
    return notas

# üß≠ Interface principal
modo = st.radio("Como deseja come√ßar?", ["üìÑ Revisar projeto existente", "üÜï Criar novo projeto"])
df = pd.DataFrame()
arquivo = None
nome_arquivo_entrada = None
linha_selecionada = None
mostrar_campos = False

if modo == "üìÑ Revisar projeto existente":
    arquivo = st.file_uploader("Anexe a planilha do projeto (.xlsx)", type=["xlsx"])
    if not arquivo:
        st.warning("‚ö†Ô∏è Para revisar um projeto, anexe a planilha primeiro.")
    if arquivo:
        nome_arquivo_entrada = arquivo.name
        try:
            df = pd.read_excel(arquivo)
            st.success("Planilha carregada com sucesso!")
            if len(df) > 1:
                opcoes = [f"{i} - {df.loc[i, 'NomeProjeto']} (Rev: {df.loc[i, 'UltimaModificacao']})" for i in df.index]
                idx = st.selectbox("Selecione a revis√£o base para editar", options=df.index, format_func=lambda i: opcoes[i])
                linha_selecionada = df.loc[idx].copy()
            else:
                linha_selecionada = df.loc[0].copy()
            if isinstance(linha_selecionada, pd.DataFrame):
                linha_selecionada = linha_selecionada.iloc[0]
            mostrar_campos = True
        except Exception as e:
            st.error(f"Erro ao ler a planilha: {e}")

elif modo == "üÜï Criar novo projeto":
    linha_selecionada = pd.Series({
        "NomeProjeto": "",
        "Ocupacao": "A-2",
        "Area": 100.0,
        "Altura": 3.0,
        "UltimoUsuario": "",
        "UltimaModificacao": datetime.now().strftime('%d/%m/%Y %H:%M'),
        "ComentarioAltura": ""
    })
    st.success("Novo projeto iniciado. Preencha os dados abaixo.")
    mostrar_campos = True

# üèóÔ∏è Levantamento das edifica√ß√µes
if mostrar_campos:
    st.markdown("### üßæ Vers√£o do Projeto")
    linha_selecionada["NomeProjeto"] = st.text_input("Nome do Projeto", value=linha_selecionada.get("NomeProjeto", ""))
    nome_usuario = st.text_input("Seu nome", value="Vitor")
    linha_selecionada["UltimoUsuario"] = f"{nome_usuario} + Copilot"
    linha_selecionada["UltimaModificacao"] = datetime.now().strftime('%d/%m/%Y %H:%M')

    # üîª Separa√ß√£o visual destacada
    st.markdown("---")
    st.markdown("<div style='border-top: 6px solid #555; margin-top: 20px; margin-bottom: 20px'></div>", unsafe_allow_html=True)

    # üè¢ Novo t√≠tulo atualizado
    st.markdown("### üè¢ Levantamento das Edifica√ß√µes do Empreendimento para Dist√¢ncias de Isolamento")
    st.markdown("As medidas de seguran√ßa podem ser determinadas individualmente para cada edifica√ß√£o, desde que estejam isoladas. Caso contr√°rio, s√£o consideradas como um √∫nico edif√≠cio.")

    # Torres residenciais
    num_torres = st.number_input("Quantidade de torres/edifica√ß√µes residenciais", min_value=0, step=1)
    torres = []
    
    for i in range(int(num_torres)):
        st.markdown(f"**Edifica√ß√£o Residencial {i+1}**")
        nome = st.text_input(f"Nome da edifica√ß√£o {i+1}", key=f"nome_torre_{i}")
        area = st.number_input(f"√Årea da edifica√ß√£o {i+1} (m¬≤)", min_value=0.0, step=1.0, key=f"area_torre_{i}")
        terrea = st.radio(f"A edifica√ß√£o {i+1} √© t√©rrea?", ["Sim", "N√£o"], key=f"terrea_torre_{i}")
    
        if terrea == "N√£o":
            um_ap_por_pav = st.radio(f"A edifica√ß√£o {i+1} √© de um apartamento por pavimento?", ["Sim", "N√£o"], key=f"ap_por_pav_{i}")
    
            subsolo_tecnico = st.radio(
                f"Existe subsolo na edifica√ß√£o {i+1}?",
                ["N√£o", "Sim"], key=f"subsolo_tecnico_{i}"
            )
    
            if subsolo_tecnico == "Sim":
                st.markdown(
                    "<span style='color:red'>‚ö†Ô∏è Se tiver mais de 0,006m¬≤ por m¬≥ do pavimento ou sua laje de teto estiver acima, em pelo menos, 1,2m do perfil natural em pelo menos um lado, n√£o √© subsolo e deve ser considerado na altura</span>",
                    unsafe_allow_html=True
                )
    
                numero_subsolos = st.radio(
                    f"Quantidade de subsolos na edifica√ß√£o {i+1}",
                    ["1", "Mais de 1"], key=f"numero_subsolos_{i}"
                )
    
                if numero_subsolos == "1":
                    area_subsolo = st.selectbox(
                        f"√Årea do subsolo da edifica√ß√£o {i+1}",
                        ["Menor que 500m¬≤", "Maior que 500m¬≤"], key=f"area_subsolo_{i}"
                    )
                else:
                    area_subsolo = "Maior que 500m¬≤"
    
                subsolo_ocupado = st.radio(
                    f"Algum dos dois primeiros subsolos possui ocupa√ß√£o secund√°ria?",
                    ["N√£o", "Sim"], key=f"subsolo_ocupado_{i}"
                )
    
                if subsolo_ocupado == "Sim":
                    subsolo_menor_50 = st.radio(
                        f"A ocupa√ß√£o secund√°ria tem no m√°ximo 50m¬≤ em cada subsolo?",
                        ["N√£o", "Sim"], key=f"subsolo_menor_50_{i}"
                    )
                else:
                    subsolo_menor_50 = "N√£o"
            else:
                numero_subsolos = "0"
                area_subsolo = "Menor que 500m¬≤"
                subsolo_ocupado = "N√£o"
                subsolo_menor_50 = "N√£o"
    
            duplex = st.radio(
                f"Existe duplex no √∫ltimo pavimento da edifica√ß√£o {i+1}?",
                ["N√£o", "Sim"], key=f"duplex_{i}"
            )
    
            atico = st.radio(
                f"H√° pavimento de √°tico/casa de m√°quinas acima do √∫ltimo pavimento?",
